package com.gogomaya.server.social;

import static com.google.common.base.Preconditions.checkNotNull;

import java.util.Set;

import javax.inject.Inject;

import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.social.connect.Connection;
import org.springframework.social.connect.ConnectionData;
import org.springframework.social.connect.ConnectionFactoryLocator;
import org.springframework.social.connect.UsersConnectionRepository;

import com.gogomaya.server.user.GamerProfile;
import com.gogomaya.server.user.GamerProfileRepository;
import com.gogomaya.server.user.SocialConnectionData;
import com.google.common.collect.ImmutableSet;

public class SocialConnectionDataAdapter {

    @Inject
    final private ConnectionFactoryLocator connectionFactoryLocator;

    @Inject
    final private UsersConnectionRepository connectionRepository;

    @Inject
    final private AmqpTemplate amqpTemplate;

    @Inject
    final private GamerProfileRepository gamerProfileRepository;

    public SocialConnectionDataAdapter(final ConnectionFactoryLocator connectionFactoryLocator, final UsersConnectionRepository usersConnectionRepository,
            final AmqpTemplate amqpTemplate, final GamerProfileRepository gamerProfileRepository) {
        this.connectionFactoryLocator = checkNotNull(connectionFactoryLocator);
        this.connectionRepository = checkNotNull(usersConnectionRepository);
        this.amqpTemplate = checkNotNull(amqpTemplate);
        this.gamerProfileRepository = checkNotNull(gamerProfileRepository);
    }

    public GamerProfile adapt(SocialConnectionData socialConnectionData) {
        // Step 1. Sanity check
        if (socialConnectionData == null)
            throw new IllegalArgumentException("Can't process null SocialConnectionData");
        // Step 2. Checking if user already exists
        String gamerId = null;

        Set<String> existingUsers = connectionRepository.findUserIdsConnectedTo(socialConnectionData.getProviderId(),
                ImmutableSet.<String> of(socialConnectionData.getProviderUserId()));
        if (existingUsers.size() > 0) {
            amqpTemplate.convertAndSend(socialConnectionData);
            gamerId = existingUsers.iterator().next();
        } else {
            // Step 2. Converting SocialConnectionData to ConnectionData in accordance with the provider
            ConnectionData connectionData = SocialAdapter.getSocialAdapter(socialConnectionData.getProviderId()).toConnectionData(socialConnectionData);
            // Step 3. Creating connection appropriate for the provided
            Connection<?> connection = connectionFactoryLocator.getConnectionFactory(socialConnectionData.getProviderId()).createConnection(connectionData);
            // Step 4. Saving connection in the Database
            // This is done by calling UserConnectionRespository, which invokes ConnectionSignUp if there is no user with provided Connection
            // So The new user will be created and added to the DB, the Id will be actually generated by JdbcUsersConnectionRepository
            // Check that this logic remains intact
            gamerId = connectionRepository.findUserIdsWithConnection(connection).iterator().next();
        }
        return gamerProfileRepository.findOne(gamerId);
    }
}
